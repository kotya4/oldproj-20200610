/*
 * Marching cubes
 * original: https://github.com/BorisTheBrave/mc-dc/blob/a165b326849d8814fb03c963ad33a9faf6cc6dea/marching_cubes_3d.py
 */
function MarchingCubes() {
  const evaluate = (func, x, y, z) => {
    // Evaluate func on each vertex of the cube
    const feval = [...Array(8)];
    for (let i = 0; i < feval.length; ++i) {
      const vertex = MarchingCubes.VERTICES[i];
      feval[i] = func(x + vertex[0], y + vertex[1], z + vertex[2]);
    }
    return feval;
  }

  const get_faces = (feval) => {
    // Determine which case we are.
    // literally: sum(2**v for v in range(8) if feval[v] > 0)
    let casei = 0;
    if (feval[0] > 0) casei |= 0x1;
    if (feval[1] > 0) casei |= 0x2;
    if (feval[2] > 0) casei |= 0x4;
    if (feval[3] > 0) casei |= 0x8;
    if (feval[4] > 0) casei |= 0x10;
    if (feval[5] > 0) casei |= 0x20;
    if (feval[6] > 0) casei |= 0x40;
    if (feval[7] > 0) casei |= 0x80;
    return MarchingCubes.CASES[casei];
  }

  const adapt = (a, b) => {
    // a and b are numbers of opposite sign. This returns
    // how far you need to interpolate from a to b to get to 0.
    if (a > 0 === b > 0) throw Error('a and b do not have opposite sign');
    return (0 - a) / (b - a);
  }

  const march = (func, x, y, z, adaptive = true) => {
    const feval = evaluate(func, x, y, z);
    const faces = get_faces(feval);

    const coordinates = [];

    for (let i = 0; i < faces.length; ++i) {
      // For each face, find the vertices of that face, and output it.
      for (let k = 0; k < faces[i].length; ++k) {
        // Find the two vertices specified by this edge, and interpolate between them.
        const edgei = faces[i][k];
        const a = MarchingCubes.EDGES[edgei][0];
        const b = MarchingCubes.EDGES[edgei][1];
        const t0 = 1 - (adaptive ? adapt(feval[a], feval[b]) : 0.5);
        const t1 = 1 - t0;
        const va = MarchingCubes.VERTICES[a];
        const vb = MarchingCubes.VERTICES[b];
        coordinates.push(x + va[0] * t0 + vb[0] * t1);
        coordinates.push(y + va[1] * t0 + vb[1] * t1);
        coordinates.push(z + va[2] * t0 + vb[2] * t1);
      }
    }

    return coordinates;
  }

  return {
    march,
  }
}

/*
 *
 */
MarchingCubes.make_sphere = function() {
  function make_face_normal(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
    // source: https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal
    //       p2
    //  _   ^  \
    //  U  /    \
    //    /      \
    //   /        \
    //  p1------->p3
    //       _
    //       V
    const Ux = x2 - x1;
    const Uy = y2 - y1;
    const Uz = z2 - z1;
    const Vx = x3 - x1;
    const Vy = y3 - y1;
    const Vz = z3 - z1;
    const Nx = Uy * Vz - Uz * Vy;
    const Ny = Uz * Vx - Ux * Vz;
    const Nz = Ux * Vy - Uy * Vx;
    const Nmag = Math.sqrt(Nx * Nx + Ny * Ny + Nz * Nz);
    return [Nx / Nmag, Ny / Nmag, Nz / Nmag];
  }

  function compare_floats(a, b, eps = 0) {
    return a - eps <= b && b <= a + eps;
  }

  // initializes marching cube
  const f = (x, y, z) => 2.5 - Math.sqrt(x * x + y * y + z * z);
  const MC = MarchingCubes();

  const coords  = [];
  const normals = [];
  const planars = []; // contains arrays of neighbor faces with same normals

  // marching cubes number
  const WIDTH  = 7;
  const HEIGHT = 7;
  const DEPTH  = 7;

  // converts volume coordinates into array index
  const get_cube_index = (x, y, z) => {
    x = (WIDTH  + x) % WIDTH;
    y = (HEIGHT + y) % HEIGHT;
    z = (DEPTH  + z) % DEPTH;
    return z + y * DEPTH + x * DEPTH * HEIGHT;
  }

  // marching
  for (let x = 0; x < WIDTH; ++x)
    for (let y = 0; y < HEIGHT; ++y)
      for (let z = 0; z < DEPTH; ++z)
  {
    // shift scene position
    const _x = x - (WIDTH  >> 1);
    const _y = y - (HEIGHT >> 1);
    const _z = z - (DEPTH  >> 1);

    // get all face coordinates of marched cube
    const cube_coords = MC.march(f, _x, _y, _z, true);

    // filling 'coords'
    coords.push(...cube_coords);

    // filling 'normals' and creating face-objects
    const faces = [];
    for (let i = 0; i < cube_coords.length; ) {
      const face_coords = [
        cube_coords[i++], cube_coords[i++], cube_coords[i++], // vertex 1
        cube_coords[i++], cube_coords[i++], cube_coords[i++], // vertex 2
        cube_coords[i++], cube_coords[i++], cube_coords[i++], // vertex 3
      ];
      const face_normal = make_face_normal(...face_coords);
      normals.push(...face_normal);
      normals.push(...face_normal);
      normals.push(...face_normal);
      faces.push({
        coords: face_coords,
        normal: face_normal,
      });
    }

    // filling 'planars'
    for (let face of faces) {
      // search for planars near current face with same normal
      let is_same_position = false; // indicates that face's 'cube_position' same as planar's
      let is_planar_found = false;
      let planar = null;
      for (planar of planars) {
        let is_same_normal = compare_floats(planar.normal[0], face.normal[0])
                          && compare_floats(planar.normal[1], face.normal[1])
                          && compare_floats(planar.normal[2], face.normal[2]);
        if (!is_same_normal) continue; // normals are not the same

        let is_near_to_planar = false;
        L__search_positions: for (let position of planar.cube_positions) {
          // searching volume 3x3x3
          for (let xx = position.x - 1; xx <= position.x + 1; ++xx)
            for (let yy = position.y - 1; yy <= position.y + 1; ++yy)
              for (let zz = position.z - 1; zz <= position.z + 1; ++zz)
          {
            // main cube corners are glued
            const _xx = (WIDTH  + xx) % WIDTH;
            const _yy = (HEIGHT + yy) % HEIGHT;
            const _zz = (DEPTH  + zz) % DEPTH;
            if (x === _xx && y === _yy && z === _zz) {
              is_same_position = position.x === x
                              && position.y === y
                              && position.z === z;
              is_near_to_planar = true;
              break L__search_positions;
            }
          }
        }
        if (!is_near_to_planar) continue; // face is not near to planar

        // TIP: Нужно ли проверять фейсы с одинаковыми нормалями
        //      внутри объема 3х3х3 на соприкосновение друг с другом
        //      или же разность нормалей сама по себе определяет это?

        // planar was found
        is_planar_found = true;
        break;
      }

      // saving face into founded planar
      if (is_planar_found) {
        planar.faces.push(face);
        if (!is_same_position)
          planar.cube_positions.push({ x, y, z });
        continue;
      }

      // no planar was found, so make new planar
      planars.push({
        faces: [face],                  // face itself
        normal: face.normal,            // all faces have same normal
        cube_positions: [{ x, y, z }],  // face's cube coordinates
      });
    }
  }

  console.log(planars);

  // making vbo

  const vbo = {
    coord: [], // 3
    color: [], // 4
    normal: [], // 3
    indices: [], // 1
    texcoord: [], // 2
  };

  for (let i = 0; i < planars.length; ++i) {
    const { faces, normal } = planars[i];
    const color = [Math.random(), Math.random(), Math.random(), 1];

    for (let face of faces) {
      const { coords } = face;
      vbo.coord.push(...coords);
      vbo.color.push(...color, ...color, ...color);
      vbo.normal.push(...normal, ...normal, ...normal);
      vbo.indices.push(vbo.indices.length);
      vbo.indices.push(vbo.indices.length);
      vbo.indices.push(vbo.indices.length);
      vbo.texcoord.push(0, 0, 0, 0, 0, 0);
    }

  }

  // const colors = [
  //   [0, 0, 1, 1],
  //   [0, 1, 0, 1],
  //   [0, 1, 1, 1],
  //   [1, 0, 0, 1],
  //   [1, 0, 1, 1],
  //   [1, 1, 0, 1],
  //   [1, 1, 1, 1],
  // ];

  // const vnum = ~~(coords.length / 3);

  // const vbo = {
  //   coord: coords, // 3
  //   color: [...Array(vnum)].map((_, i) => colors[~~(i / 3) % colors.length]).flat(), // 4
  //   normal: normals, // 3
  //   indices: [...Array(vnum)].map((_, i) => i), // 1
  //   texcoord: [...Array(vnum)].map((_, i) => [0, 0]).flat(), // 2
  // };

  return vbo;
}
/*
 *
 */

MarchingCubes.VERTICES = [
  [0, 0, 0],
  [1, 0, 0],
  [1, 1, 0],
  [0, 1, 0],
  [0, 0, 1],
  [1, 0, 1],
  [1, 1, 1],
  [0, 1, 1],
];

MarchingCubes.EDGES = [
  [0, 1],
  [1, 2],
  [2, 3],
  [3, 0],
  [4, 5],
  [5, 6],
  [6, 7],
  [7, 4],
  [0, 4],
  [1, 5],
  [2, 6],
  [3, 7],
];

MarchingCubes.CASES = [[],
  [[8, 0, 3]],
  [[1, 0, 9]],
  [[8, 1, 3], [8, 9, 1]],
  [[10, 2, 1]],
  [[8, 0, 3], [1, 10, 2]],
  [[9, 2, 0], [9, 10, 2]],
  [[3, 8, 2], [2, 8, 10], [10, 8, 9]],
  [[3, 2, 11]],
  [[0, 2, 8], [2, 11, 8]],
  [[1, 0, 9], [2, 11, 3]],
  [[2, 9, 1], [11, 9, 2], [8, 9, 11]],
  [[3, 10, 11], [3, 1, 10]],
  [[1, 10, 0], [0, 10, 8], [8, 10, 11]],
  [[0, 11, 3], [9, 11, 0], [10, 11, 9]],
  [[8, 9, 11], [11, 9, 10]],
  [[7, 4, 8]],
  [[3, 7, 0], [7, 4, 0]],
  [[7, 4, 8], [9, 1, 0]],
  [[9, 1, 4], [4, 1, 7], [7, 1, 3]],
  [[7, 4, 8], [2, 1, 10]],
  [[4, 3, 7], [4, 0, 3], [2, 1, 10]],
  [[2, 0, 10], [0, 9, 10], [7, 4, 8]],
  [[9, 10, 4], [4, 10, 3], [3, 10, 2], [4, 3, 7]],
  [[4, 8, 7], [3, 2, 11]],
  [[7, 4, 11], [11, 4, 2], [2, 4, 0]],
  [[1, 0, 9], [2, 11, 3], [8, 7, 4]],
  [[2, 11, 1], [1, 11, 9], [9, 11, 7], [9, 7, 4]],
  [[10, 11, 1], [11, 3, 1], [4, 8, 7]],
  [[4, 0, 7], [7, 0, 10], [0, 1, 10], [7, 10, 11]],
  [[7, 4, 8], [0, 11, 3], [9, 11, 0], [10, 11, 9]],
  [[4, 11, 7], [9, 11, 4], [10, 11, 9]],
  [[9, 4, 5]],
  [[9, 4, 5], [0, 3, 8]],
  [[0, 5, 1], [0, 4, 5]],
  [[4, 3, 8], [5, 3, 4], [1, 3, 5]],
  [[5, 9, 4], [10, 2, 1]],
  [[8, 0, 3], [1, 10, 2], [4, 5, 9]],
  [[10, 4, 5], [2, 4, 10], [0, 4, 2]],
  [[3, 10, 2], [8, 10, 3], [5, 10, 8], [4, 5, 8]],
  [[9, 4, 5], [11, 3, 2]],
  [[11, 0, 2], [11, 8, 0], [9, 4, 5]],
  [[5, 1, 4], [1, 0, 4], [11, 3, 2]],
  [[5, 1, 4], [4, 1, 11], [1, 2, 11], [4, 11, 8]],
  [[3, 10, 11], [3, 1, 10], [5, 9, 4]],
  [[9, 4, 5], [1, 10, 0], [0, 10, 8], [8, 10, 11]],
  [[5, 0, 4], [11, 0, 5], [11, 3, 0], [10, 11, 5]],
  [[5, 10, 4], [4, 10, 8], [8, 10, 11]],
  [[9, 7, 5], [9, 8, 7]],
  [[0, 5, 9], [3, 5, 0], [7, 5, 3]],
  [[8, 7, 0], [0, 7, 1], [1, 7, 5]],
  [[7, 5, 3], [3, 5, 1]],
  [[7, 5, 8], [5, 9, 8], [2, 1, 10]],
  [[10, 2, 1], [0, 5, 9], [3, 5, 0], [7, 5, 3]],
  [[8, 2, 0], [5, 2, 8], [10, 2, 5], [7, 5, 8]],
  [[2, 3, 10], [10, 3, 5], [5, 3, 7]],
  [[9, 7, 5], [9, 8, 7], [11, 3, 2]],
  [[0, 2, 9], [9, 2, 7], [7, 2, 11], [9, 7, 5]],
  [[3, 2, 11], [8, 7, 0], [0, 7, 1], [1, 7, 5]],
  [[11, 1, 2], [7, 1, 11], [5, 1, 7]],
  [[3, 1, 11], [11, 1, 10], [8, 7, 9], [9, 7, 5]],
  [[11, 7, 0], [7, 5, 0], [5, 9, 0], [10, 11, 0], [1, 10, 0]],
  [[0, 5, 10], [0, 7, 5], [0, 8, 7], [0, 10, 11], [0, 11, 3]],
  [[10, 11, 5], [11, 7, 5]],
  [[5, 6, 10]],
  [[8, 0, 3], [10, 5, 6]],
  [[0, 9, 1], [5, 6, 10]],
  [[8, 1, 3], [8, 9, 1], [10, 5, 6]],
  [[1, 6, 2], [1, 5, 6]],
  [[6, 2, 5], [2, 1, 5], [8, 0, 3]],
  [[5, 6, 9], [9, 6, 0], [0, 6, 2]],
  [[5, 8, 9], [2, 8, 5], [3, 8, 2], [6, 2, 5]],
  [[3, 2, 11], [10, 5, 6]],
  [[0, 2, 8], [2, 11, 8], [5, 6, 10]],
  [[3, 2, 11], [0, 9, 1], [10, 5, 6]],
  [[5, 6, 10], [2, 9, 1], [11, 9, 2], [8, 9, 11]],
  [[11, 3, 6], [6, 3, 5], [5, 3, 1]],
  [[11, 8, 6], [6, 8, 1], [1, 8, 0], [6, 1, 5]],
  [[5, 0, 9], [6, 0, 5], [3, 0, 6], [11, 3, 6]],
  [[6, 9, 5], [11, 9, 6], [8, 9, 11]],
  [[7, 4, 8], [6, 10, 5]],
  [[3, 7, 0], [7, 4, 0], [10, 5, 6]],
  [[7, 4, 8], [6, 10, 5], [9, 1, 0]],
  [[5, 6, 10], [9, 1, 4], [4, 1, 7], [7, 1, 3]],
  [[1, 6, 2], [1, 5, 6], [7, 4, 8]],
  [[6, 1, 5], [2, 1, 6], [0, 7, 4], [3, 7, 0]],
  [[4, 8, 7], [5, 6, 9], [9, 6, 0], [0, 6, 2]],
  [[2, 3, 9], [3, 7, 9], [7, 4, 9], [6, 2, 9], [5, 6, 9]],
  [[2, 11, 3], [7, 4, 8], [10, 5, 6]],
  [[6, 10, 5], [7, 4, 11], [11, 4, 2], [2, 4, 0]],
  [[1, 0, 9], [8, 7, 4], [3, 2, 11], [5, 6, 10]],
  [[1, 2, 9], [9, 2, 11], [9, 11, 4], [4, 11, 7], [5, 6, 10]],
  [[7, 4, 8], [11, 3, 6], [6, 3, 5], [5, 3, 1]],
  [[11, 0, 1], [11, 4, 0], [11, 7, 4], [11, 1, 5], [11, 5, 6]],
  [[6, 9, 5], [0, 9, 6], [11, 0, 6], [3, 0, 11], [4, 8, 7]],
  [[5, 6, 9], [9, 6, 11], [9, 11, 7], [9, 7, 4]],
  [[4, 10, 9], [4, 6, 10]],
  [[10, 4, 6], [10, 9, 4], [8, 0, 3]],
  [[1, 0, 10], [10, 0, 6], [6, 0, 4]],
  [[8, 1, 3], [6, 1, 8], [6, 10, 1], [4, 6, 8]],
  [[9, 2, 1], [4, 2, 9], [6, 2, 4]],
  [[3, 8, 0], [9, 2, 1], [4, 2, 9], [6, 2, 4]],
  [[0, 4, 2], [2, 4, 6]],
  [[8, 2, 3], [4, 2, 8], [6, 2, 4]],
  [[4, 10, 9], [4, 6, 10], [2, 11, 3]],
  [[11, 8, 2], [2, 8, 0], [6, 10, 4], [4, 10, 9]],
  [[2, 11, 3], [1, 0, 10], [10, 0, 6], [6, 0, 4]],
  [[8, 4, 1], [4, 6, 1], [6, 10, 1], [11, 8, 1], [2, 11, 1]],
  [[3, 1, 11], [11, 1, 4], [1, 9, 4], [11, 4, 6]],
  [[6, 11, 1], [11, 8, 1], [8, 0, 1], [4, 6, 1], [9, 4, 1]],
  [[3, 0, 11], [11, 0, 6], [6, 0, 4]],
  [[4, 11, 8], [4, 6, 11]],
  [[6, 8, 7], [10, 8, 6], [9, 8, 10]],
  [[3, 7, 0], [0, 7, 10], [7, 6, 10], [0, 10, 9]],
  [[1, 6, 10], [0, 6, 1], [7, 6, 0], [8, 7, 0]],
  [[10, 1, 6], [6, 1, 7], [7, 1, 3]],
  [[9, 8, 1], [1, 8, 6], [6, 8, 7], [1, 6, 2]],
  [[9, 7, 6], [9, 3, 7], [9, 0, 3], [9, 6, 2], [9, 2, 1]],
  [[7, 6, 8], [8, 6, 0], [0, 6, 2]],
  [[3, 6, 2], [3, 7, 6]],
  [[3, 2, 11], [6, 8, 7], [10, 8, 6], [9, 8, 10]],
  [[7, 9, 0], [7, 10, 9], [7, 6, 10], [7, 0, 2], [7, 2, 11]],
  [[0, 10, 1], [6, 10, 0], [8, 6, 0], [7, 6, 8], [2, 11, 3]],
  [[1, 6, 10], [7, 6, 1], [11, 7, 1], [2, 11, 1]],
  [[1, 9, 6], [9, 8, 6], [8, 7, 6], [3, 1, 6], [11, 3, 6]],
  [[9, 0, 1], [11, 7, 6]],
  [[0, 11, 3], [6, 11, 0], [7, 6, 0], [8, 7, 0]],
  [[7, 6, 11]],
  [[11, 6, 7]],
  [[3, 8, 0], [11, 6, 7]],
  [[1, 0, 9], [6, 7, 11]],
  [[1, 3, 9], [3, 8, 9], [6, 7, 11]],
  [[10, 2, 1], [6, 7, 11]],
  [[10, 2, 1], [3, 8, 0], [6, 7, 11]],
  [[9, 2, 0], [9, 10, 2], [11, 6, 7]],
  [[11, 6, 7], [3, 8, 2], [2, 8, 10], [10, 8, 9]],
  [[2, 6, 3], [6, 7, 3]],
  [[8, 6, 7], [0, 6, 8], [2, 6, 0]],
  [[7, 2, 6], [7, 3, 2], [1, 0, 9]],
  [[8, 9, 7], [7, 9, 2], [2, 9, 1], [7, 2, 6]],
  [[6, 1, 10], [7, 1, 6], [3, 1, 7]],
  [[8, 0, 7], [7, 0, 6], [6, 0, 1], [6, 1, 10]],
  [[7, 3, 6], [6, 3, 9], [3, 0, 9], [6, 9, 10]],
  [[7, 8, 6], [6, 8, 10], [10, 8, 9]],
  [[8, 11, 4], [11, 6, 4]],
  [[11, 0, 3], [6, 0, 11], [4, 0, 6]],
  [[6, 4, 11], [4, 8, 11], [1, 0, 9]],
  [[1, 3, 9], [9, 3, 6], [3, 11, 6], [9, 6, 4]],
  [[8, 11, 4], [11, 6, 4], [1, 10, 2]],
  [[1, 10, 2], [11, 0, 3], [6, 0, 11], [4, 0, 6]],
  [[2, 9, 10], [0, 9, 2], [4, 11, 6], [8, 11, 4]],
  [[3, 4, 9], [3, 6, 4], [3, 11, 6], [3, 9, 10], [3, 10, 2]],
  [[3, 2, 8], [8, 2, 4], [4, 2, 6]],
  [[2, 4, 0], [6, 4, 2]],
  [[0, 9, 1], [3, 2, 8], [8, 2, 4], [4, 2, 6]],
  [[1, 2, 9], [9, 2, 4], [4, 2, 6]],
  [[10, 3, 1], [4, 3, 10], [4, 8, 3], [6, 4, 10]],
  [[10, 0, 1], [6, 0, 10], [4, 0, 6]],
  [[3, 10, 6], [3, 9, 10], [3, 0, 9], [3, 6, 4], [3, 4, 8]],
  [[9, 10, 4], [10, 6, 4]],
  [[9, 4, 5], [7, 11, 6]],
  [[9, 4, 5], [7, 11, 6], [0, 3, 8]],
  [[0, 5, 1], [0, 4, 5], [6, 7, 11]],
  [[11, 6, 7], [4, 3, 8], [5, 3, 4], [1, 3, 5]],
  [[1, 10, 2], [9, 4, 5], [6, 7, 11]],
  [[8, 0, 3], [4, 5, 9], [10, 2, 1], [11, 6, 7]],
  [[7, 11, 6], [10, 4, 5], [2, 4, 10], [0, 4, 2]],
  [[8, 2, 3], [10, 2, 8], [4, 10, 8], [5, 10, 4], [11, 6, 7]],
  [[2, 6, 3], [6, 7, 3], [9, 4, 5]],
  [[5, 9, 4], [8, 6, 7], [0, 6, 8], [2, 6, 0]],
  [[7, 3, 6], [6, 3, 2], [4, 5, 0], [0, 5, 1]],
  [[8, 1, 2], [8, 5, 1], [8, 4, 5], [8, 2, 6], [8, 6, 7]],
  [[9, 4, 5], [6, 1, 10], [7, 1, 6], [3, 1, 7]],
  [[7, 8, 6], [6, 8, 0], [6, 0, 10], [10, 0, 1], [5, 9, 4]],
  [[3, 0, 10], [0, 4, 10], [4, 5, 10], [7, 3, 10], [6, 7, 10]],
  [[8, 6, 7], [10, 6, 8], [5, 10, 8], [4, 5, 8]],
  [[5, 9, 6], [6, 9, 11], [11, 9, 8]],
  [[11, 6, 3], [3, 6, 0], [0, 6, 5], [0, 5, 9]],
  [[8, 11, 0], [0, 11, 5], [5, 11, 6], [0, 5, 1]],
  [[6, 3, 11], [5, 3, 6], [1, 3, 5]],
  [[10, 2, 1], [5, 9, 6], [6, 9, 11], [11, 9, 8]],
  [[3, 11, 0], [0, 11, 6], [0, 6, 9], [9, 6, 5], [1, 10, 2]],
  [[0, 8, 5], [8, 11, 5], [11, 6, 5], [2, 0, 5], [10, 2, 5]],
  [[11, 6, 3], [3, 6, 5], [3, 5, 10], [3, 10, 2]],
  [[3, 9, 8], [6, 9, 3], [5, 9, 6], [2, 6, 3]],
  [[9, 6, 5], [0, 6, 9], [2, 6, 0]],
  [[6, 5, 8], [5, 1, 8], [1, 0, 8], [2, 6, 8], [3, 2, 8]],
  [[2, 6, 1], [6, 5, 1]],
  [[6, 8, 3], [6, 9, 8], [6, 5, 9], [6, 3, 1], [6, 1, 10]],
  [[1, 10, 0], [0, 10, 6], [0, 6, 5], [0, 5, 9]],
  [[3, 0, 8], [6, 5, 10]],
  [[10, 6, 5]],
  [[5, 11, 10], [5, 7, 11]],
  [[5, 11, 10], [5, 7, 11], [3, 8, 0]],
  [[11, 10, 7], [10, 5, 7], [0, 9, 1]],
  [[5, 7, 10], [10, 7, 11], [9, 1, 8], [8, 1, 3]],
  [[2, 1, 11], [11, 1, 7], [7, 1, 5]],
  [[3, 8, 0], [2, 1, 11], [11, 1, 7], [7, 1, 5]],
  [[2, 0, 11], [11, 0, 5], [5, 0, 9], [11, 5, 7]],
  [[2, 9, 5], [2, 8, 9], [2, 3, 8], [2, 5, 7], [2, 7, 11]],
  [[10, 3, 2], [5, 3, 10], [7, 3, 5]],
  [[10, 0, 2], [7, 0, 10], [8, 0, 7], [5, 7, 10]],
  [[0, 9, 1], [10, 3, 2], [5, 3, 10], [7, 3, 5]],
  [[7, 8, 2], [8, 9, 2], [9, 1, 2], [5, 7, 2], [10, 5, 2]],
  [[3, 1, 7], [7, 1, 5]],
  [[0, 7, 8], [1, 7, 0], [5, 7, 1]],
  [[9, 5, 0], [0, 5, 3], [3, 5, 7]],
  [[5, 7, 9], [7, 8, 9]],
  [[4, 10, 5], [8, 10, 4], [11, 10, 8]],
  [[3, 4, 0], [10, 4, 3], [10, 5, 4], [11, 10, 3]],
  [[1, 0, 9], [4, 10, 5], [8, 10, 4], [11, 10, 8]],
  [[4, 3, 11], [4, 1, 3], [4, 9, 1], [4, 11, 10], [4, 10, 5]],
  [[1, 5, 2], [2, 5, 8], [5, 4, 8], [2, 8, 11]],
  [[5, 4, 11], [4, 0, 11], [0, 3, 11], [1, 5, 11], [2, 1, 11]],
  [[5, 11, 2], [5, 8, 11], [5, 4, 8], [5, 2, 0], [5, 0, 9]],
  [[5, 4, 9], [2, 3, 11]],
  [[3, 4, 8], [2, 4, 3], [5, 4, 2], [10, 5, 2]],
  [[5, 4, 10], [10, 4, 2], [2, 4, 0]],
  [[2, 8, 3], [4, 8, 2], [10, 4, 2], [5, 4, 10], [0, 9, 1]],
  [[4, 10, 5], [2, 10, 4], [1, 2, 4], [9, 1, 4]],
  [[8, 3, 4], [4, 3, 5], [5, 3, 1]],
  [[1, 5, 0], [5, 4, 0]],
  [[5, 0, 9], [3, 0, 5], [8, 3, 5], [4, 8, 5]],
  [[5, 4, 9]],
  [[7, 11, 4], [4, 11, 9], [9, 11, 10]],
  [[8, 0, 3], [7, 11, 4], [4, 11, 9], [9, 11, 10]],
  [[0, 4, 1], [1, 4, 11], [4, 7, 11], [1, 11, 10]],
  [[10, 1, 4], [1, 3, 4], [3, 8, 4], [11, 10, 4], [7, 11, 4]],
  [[9, 4, 1], [1, 4, 2], [2, 4, 7], [2, 7, 11]],
  [[1, 9, 2], [2, 9, 4], [2, 4, 11], [11, 4, 7], [3, 8, 0]],
  [[11, 4, 7], [2, 4, 11], [0, 4, 2]],
  [[7, 11, 4], [4, 11, 2], [4, 2, 3], [4, 3, 8]],
  [[10, 9, 2], [2, 9, 7], [7, 9, 4], [2, 7, 3]],
  [[2, 10, 7], [10, 9, 7], [9, 4, 7], [0, 2, 7], [8, 0, 7]],
  [[10, 4, 7], [10, 0, 4], [10, 1, 0], [10, 7, 3], [10, 3, 2]],
  [[8, 4, 7], [10, 1, 2]],
  [[4, 1, 9], [7, 1, 4], [3, 1, 7]],
  [[8, 0, 7], [7, 0, 1], [7, 1, 9], [7, 9, 4]],
  [[0, 7, 3], [0, 4, 7]],
  [[8, 4, 7]],
  [[9, 8, 10], [10, 8, 11]],
  [[3, 11, 0], [0, 11, 9], [9, 11, 10]],
  [[0, 10, 1], [8, 10, 0], [11, 10, 8]],
  [[11, 10, 3], [10, 1, 3]],
  [[1, 9, 2], [2, 9, 11], [11, 9, 8]],
  [[9, 2, 1], [11, 2, 9], [3, 11, 9], [0, 3, 9]],
  [[8, 2, 0], [8, 11, 2]],
  [[11, 2, 3]],
  [[2, 8, 3], [10, 8, 2], [9, 8, 10]],
  [[0, 2, 9], [2, 10, 9]],
  [[3, 2, 8], [8, 2, 10], [8, 10, 1], [8, 1, 0]],
  [[1, 2, 10]],
  [[3, 1, 8], [1, 9, 8]],
  [[9, 0, 1]],
  [[3, 0, 8]],
  [],
];
