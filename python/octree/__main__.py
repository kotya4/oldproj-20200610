#!/usr/bin/env python3
from Quadtree import Quadtree
from Octree import Octree
import pygame
from pygame.locals import *
from random import random, randint
from types import SimpleNamespace
import pprint


def prepare_pygame(width=300, height=300):
    colors = SimpleNamespace(
        background=( 10,  10,  10),
        text      =(250, 250, 250),
    )

    pygame.init()
    pygame.display.set_mode((width, height))
    pygame.display.set_caption('Octree demo')

    screen = pygame.display.get_surface()
    clock = pygame.time.Clock()

    def clear(color=colors.background):
        screen.fill(color)

    def text(text, topleft, color=colors.text, font=pygame.font.Font(None, 24)):
        surface = font.render(text, True, color)
        screen.blit(surface, surface.get_rect(topleft=topleft))

    def flush():
        pygame.display.flip()

    def tick(msec):
        clock.tick(msec)

    def randcolor():
        return (randint(0, 255), randint(0, 255), randint(0, 255))

    def rect(r, color=randcolor(), width=0):
        pygame.draw.rect(screen, color, r, width)

    def circle(center, radius, color=randcolor(), width=0):
        pygame.draw.circle(screen, color, center, radius)

    def project(normal):
        return list(map(lambda e: int(e[1] * height if e[0] & 1 else e[1] * width), enumerate(normal)))

    return SimpleNamespace(
        randcolor=randcolor,
        project=project,
        circle=circle,
        flush=flush,
        clear=clear,
        text=text,
        tick=tick,
        rect=rect,
    )


def main():
    ctx = prepare_pygame()
    points = list(map(lambda _: [random(), random(), random()], range(10)))
    quadtree = Quadtree(points=points, rect=(0, 0, 1, 1), depth=4)

    pprint.pprint(quadtree.raw)
    print('Press ESC for quit...')

    # recoursively draws the data generated by Quadtree
    def draw_quadtree(raw):
        rect_pos  = ctx.project(raw['rect'])
        rect_size = ctx.project(raw['rect'][2:])
        rect = (rect_pos[0], rect_pos[1], rect_size[0], rect_size[1])
        ctx.rect(rect, ctx.randcolor(), 1)
        if raw['LT']: draw_quadtree(raw['LT'])
        if raw['RT']: draw_quadtree(raw['RT'])
        if raw['LB']: draw_quadtree(raw['LB'])
        if raw['RB']: draw_quadtree(raw['RB'])

    # renders scene
    def render():
        ctx.clear()
        draw_quadtree(quadtree.raw)
        for point in points: ctx.circle(ctx.project(point[:2]), 2)
        ctx.flush()

    render()

    while True:
        ctx.tick(60)
        for event in pygame.event.get():
            if event.type == QUIT: return
            elif event.type == KEYDOWN and event.key == K_ESCAPE: return
            # elif event.type == MOUSEBUTTONDOWN: print('mouse down')
            # elif event.type == MOUSEBUTTONUP: print('mouse up')


if __name__ == '__main__':
    main()
